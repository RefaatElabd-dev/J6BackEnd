// <auto-generated />
using System;
using J6BackEnd.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace J6BackEnd.Migrations
{
    [DbContext(typeof(Jumia1Context))]
    [Migration("20210519170218_inii")]
    partial class inii
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("J6BackEnd.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandId");

                    b.Property<string>("BrandName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("brandName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("BrandId");

                    b.ToTable("brand");
                });

            modelBuilder.Entity("J6BackEnd.Models.Cart", b =>
                {
                    b.Property<int>("Cartid")
                        .HasColumnType("int")
                        .HasColumnName("cartid");

                    b.Property<int?>("Cost")
                        .HasColumnType("int")
                        .HasColumnName("cost");

                    b.Property<int?>("CustId")
                        .HasColumnType("int")
                        .HasColumnName("custId");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employeeId");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("orderDate");

                    b.Property<string>("Paymentid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentid");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("date")
                        .HasColumnName("shippingDate");

                    b.Property<int?>("ShippingDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("shippingDetailsId");

                    b.HasKey("Cartid");

                    b.HasIndex("CustId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShippingDetailsId");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("J6BackEnd.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("CategoryId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("J6BackEnd.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cityId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cityName");

                    b.Property<int>("GovernmentId")
                        .HasColumnType("int")
                        .HasColumnName("governmentId");

                    b.HasKey("CityId");

                    b.HasIndex("GovernmentId");

                    b.ToTable("city");
                });

            modelBuilder.Entity("J6BackEnd.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.HasKey("CustomerId");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("J6BackEnd.Models.CustomerAddress", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressId");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("country");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int")
                        .HasColumnName("postalCode");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street");

                    b.HasKey("UserId", "AddressId");

                    b.ToTable("customerAddress");
                });

            modelBuilder.Entity("J6BackEnd.Models.CustomerPhone", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("UserId", "PhoneNumber");

                    b.ToTable("customerPhone");
                });

            modelBuilder.Entity("J6BackEnd.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hireDate");

                    b.Property<string>("Salary")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("salary");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("J6BackEnd.Models.Government", b =>
                {
                    b.Property<int>("GovernmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("governmentId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GovernmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("governmentName");

                    b.HasKey("GovernmentId");

                    b.ToTable("government");
                });

            modelBuilder.Entity("J6BackEnd.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("J6BackEnd.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<int?>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Paymenttype")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("paymenttype")
                        .IsFixedLength(true);

                    b.HasKey("PaymentId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("J6BackEnd.Models.ProdCart", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cartId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.HasKey("CartId", "ProductId");

                    b.ToTable("prod_Cart");
                });

            modelBuilder.Entity("J6BackEnd.Models.ProdOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("productId")
                        .IsFixedLength(true);

                    b.HasKey("OrderId", "ProductId");

                    b.ToTable("prod_order");
                });

            modelBuilder.Entity("J6BackEnd.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deletedAt");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Discount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("discount");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("model");

                    b.Property<string>("Price")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("productName");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("promotionId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double?>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<string>("Ship")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ship");

                    b.Property<string>("Size")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("size")
                        .IsFixedLength(true);

                    b.Property<int?>("SoldQuantities")
                        .HasColumnType("int")
                        .HasColumnName("soldQuantities");

                    b.Property<int?>("SubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("subcategoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("ProductId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("J6BackEnd.Models.ProductBrand", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandId");

                    b.HasKey("ProductId", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("productBrand");
                });

            modelBuilder.Entity("J6BackEnd.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("imageId");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.HasKey("ProductId", "ImageId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("J6BackEnd.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("sellerId");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("J6BackEnd.Models.Review", b =>
                {
                    b.Property<int>("CustimerId")
                        .HasColumnType("int")
                        .HasColumnName("custimerId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<string>("Rating")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rating");

                    b.HasKey("CustimerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("J6BackEnd.Models.Seller", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("seller");
                });

            modelBuilder.Entity("J6BackEnd.Models.ShippingDetail", b =>
                {
                    b.Property<int>("ShippingDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("shippingDetailsId");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<string>("PurshesCost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("purshesCost");

                    b.HasKey("ShippingDetailsId");

                    b.HasIndex("PaymentId");

                    b.ToTable("ShippingDetails");
                });

            modelBuilder.Entity("J6BackEnd.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("statusName");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("J6BackEnd.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("storeId");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("buildingNumber");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("sellerId");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("street");

                    b.HasKey("StoreId");

                    b.HasIndex("SellerId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("J6BackEnd.Models.StoreProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("storeId");

                    b.Property<int?>("Quantities")
                        .HasColumnType("int")
                        .HasColumnName("quantities");

                    b.HasKey("ProductId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreProducts");
                });

            modelBuilder.Entity("J6BackEnd.Models.SubCategory", b =>
                {
                    b.Property<int>("SubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subcategoryId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("SubcategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subcategoryName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("SubcategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("subCategory");
                });

            modelBuilder.Entity("J6BackEnd.Models.User", b =>
                {
                    b.Property<int>("Userid")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.HasKey("Userid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("J6BackEnd.Models.UserAddress", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressId");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("country");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int")
                        .HasColumnName("postalCode");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street");

                    b.HasKey("UserId", "AddressId");

                    b.ToTable("userAddress");
                });

            modelBuilder.Entity("J6BackEnd.Models.UserPhone", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("UserId", "PhoneNumber");

                    b.ToTable("userPhone");
                });

            modelBuilder.Entity("J6BackEnd.Models.View", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<string>("IsFar")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("isFar");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("J6BackEnd.Models.Cart", b =>
                {
                    b.HasOne("J6BackEnd.Models.Customer", "Cust")
                        .WithMany("Carts")
                        .HasForeignKey("CustId")
                        .HasConstraintName("FK_cart_customer");

                    b.HasOne("J6BackEnd.Models.Employee", "Employee")
                        .WithMany("Carts")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_cart_Employees");

                    b.HasOne("J6BackEnd.Models.ShippingDetail", "ShippingDetails")
                        .WithMany("Carts")
                        .HasForeignKey("ShippingDetailsId")
                        .HasConstraintName("FK_cart_ShippingDetails");

                    b.Navigation("Cust");

                    b.Navigation("Employee");

                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("J6BackEnd.Models.City", b =>
                {
                    b.HasOne("J6BackEnd.Models.Government", "Government")
                        .WithMany("Cities")
                        .HasForeignKey("GovernmentId")
                        .HasConstraintName("FK_city_government")
                        .IsRequired();

                    b.Navigation("Government");
                });

            modelBuilder.Entity("J6BackEnd.Models.Customer", b =>
                {
                    b.HasOne("J6BackEnd.Models.User", "CustomerNavigation")
                        .WithOne("Customer")
                        .HasForeignKey("J6BackEnd.Models.Customer", "CustomerId")
                        .HasConstraintName("FK_customer_User")
                        .IsRequired();

                    b.Navigation("CustomerNavigation");
                });

            modelBuilder.Entity("J6BackEnd.Models.CustomerAddress", b =>
                {
                    b.HasOne("J6BackEnd.Models.User", "User")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_customerAddress_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("J6BackEnd.Models.CustomerPhone", b =>
                {
                    b.HasOne("J6BackEnd.Models.User", "User")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_customerPhone_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("J6BackEnd.Models.Employee", b =>
                {
                    b.HasOne("J6BackEnd.Models.User", "IdNavigation")
                        .WithOne("Employee")
                        .HasForeignKey("J6BackEnd.Models.Employee", "Id")
                        .HasConstraintName("FK_Employees_User")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("J6BackEnd.Models.Order", b =>
                {
                    b.HasOne("J6BackEnd.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Orders_customer")
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("J6BackEnd.Models.ProdCart", b =>
                {
                    b.HasOne("J6BackEnd.Models.Cart", "Cart")
                        .WithMany("ProdCarts")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_prod_Cart_cart")
                        .IsRequired();

                    b.HasOne("J6BackEnd.Models.Product", "CartNavigation")
                        .WithMany("ProdCarts")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_prod_Cart_product")
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("CartNavigation");
                });

            modelBuilder.Entity("J6BackEnd.Models.ProdOrder", b =>
                {
                    b.HasOne("J6BackEnd.Models.Order", "Order")
                        .WithMany("ProdOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_prod_order_Orders")
                        .IsRequired();

                    b.HasOne("J6BackEnd.Models.Product", "OrderNavigation")
                        .WithMany("ProdOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_prod_order_product")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderNavigation");
                });

            modelBuilder.Entity("J6BackEnd.Models.Product", b =>
                {
                    b.HasOne("J6BackEnd.Models.Promotion", "Promotion")
                        .WithMany("Products")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_product_Promotions");

                    b.HasOne("J6BackEnd.Models.SubCategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .HasConstraintName("FK_product_subCategory");

                    b.Navigation("Promotion");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("J6BackEnd.Models.ProductBrand", b =>
                {
                    b.HasOne("J6BackEnd.Models.Brand", "Brand")
                        .WithMany("ProductBrands")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_productBrand_brand")
                        .IsRequired();

                    b.HasOne("J6BackEnd.Models.Product", "Product")
                        .WithMany("ProductBrands")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_productBrand_product")
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("J6BackEnd.Models.ProductImage", b =>
                {
                    b.HasOne("J6BackEnd.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImage_product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("J6BackEnd.Models.Promotion", b =>
                {
                    b.HasOne("J6BackEnd.Models.Seller", "Seller")
                        .WithMany("Promotions")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK_Promotions_Promotions");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("J6BackEnd.Models.Review", b =>
                {
                    b.HasOne("J6BackEnd.Models.Customer", "Custimer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustimerId")
                        .HasConstraintName("FK_Reviews_customer")
                        .IsRequired();

                    b.HasOne("J6BackEnd.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Reviews_product")
                        .IsRequired();

                    b.Navigation("Custimer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("J6BackEnd.Models.Seller", b =>
                {
                    b.HasOne("J6BackEnd.Models.User", "IdNavigation")
                        .WithOne("Seller")
                        .HasForeignKey("J6BackEnd.Models.Seller", "Id")
                        .HasConstraintName("FK_seller_User")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("J6BackEnd.Models.ShippingDetail", b =>
                {
                    b.HasOne("J6BackEnd.Models.Payment", "Payment")
                        .WithMany("ShippingDetails")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_ShippingDetails_payment");

                    b.HasOne("J6BackEnd.Models.Product", "ShippingDetails")
                        .WithOne("ShippingDetail")
                        .HasForeignKey("J6BackEnd.Models.ShippingDetail", "ShippingDetailsId")
                        .HasConstraintName("FK_ShippingDetails_product")
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("J6BackEnd.Models.Store", b =>
                {
                    b.HasOne("J6BackEnd.Models.Seller", "Seller")
                        .WithMany("Stores")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK_Stores_seller");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("J6BackEnd.Models.StoreProduct", b =>
                {
                    b.HasOne("J6BackEnd.Models.Product", "Product")
                        .WithMany("StoreProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_StoreProducts_product")
                        .IsRequired();

                    b.HasOne("J6BackEnd.Models.Store", "Store")
                        .WithMany("StoreProducts")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreProducts_Stores")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("J6BackEnd.Models.SubCategory", b =>
                {
                    b.HasOne("J6BackEnd.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_subCategory_category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("J6BackEnd.Models.UserAddress", b =>
                {
                    b.HasOne("J6BackEnd.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_userAddress_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("J6BackEnd.Models.UserPhone", b =>
                {
                    b.HasOne("J6BackEnd.Models.User", "User")
                        .WithMany("UserPhones")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_userPhone_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("J6BackEnd.Models.View", b =>
                {
                    b.HasOne("J6BackEnd.Models.Customer", "Customer")
                        .WithMany("Views")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Views_customer1")
                        .IsRequired();

                    b.HasOne("J6BackEnd.Models.Product", "Product")
                        .WithMany("Views")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Views_product")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("J6BackEnd.Models.Brand", b =>
                {
                    b.Navigation("ProductBrands");
                });

            modelBuilder.Entity("J6BackEnd.Models.Cart", b =>
                {
                    b.Navigation("ProdCarts");
                });

            modelBuilder.Entity("J6BackEnd.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("J6BackEnd.Models.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("J6BackEnd.Models.Employee", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("J6BackEnd.Models.Government", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("J6BackEnd.Models.Order", b =>
                {
                    b.Navigation("ProdOrders");
                });

            modelBuilder.Entity("J6BackEnd.Models.Payment", b =>
                {
                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("J6BackEnd.Models.Product", b =>
                {
                    b.Navigation("ProdCarts");

                    b.Navigation("ProdOrders");

                    b.Navigation("ProductBrands");

                    b.Navigation("ProductImages");

                    b.Navigation("Reviews");

                    b.Navigation("ShippingDetail");

                    b.Navigation("StoreProducts");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("J6BackEnd.Models.Promotion", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("J6BackEnd.Models.Seller", b =>
                {
                    b.Navigation("Promotions");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("J6BackEnd.Models.ShippingDetail", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("J6BackEnd.Models.Store", b =>
                {
                    b.Navigation("StoreProducts");
                });

            modelBuilder.Entity("J6BackEnd.Models.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("J6BackEnd.Models.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerPhones");

                    b.Navigation("Employee");

                    b.Navigation("Seller");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserPhones");
                });
#pragma warning restore 612, 618
        }
    }
}
